<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Hydrator\HydratorException;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppDocumentEventsHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate(object $document, array $data, array $hints = array()): array
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['id']['type'];
                $return = $value instanceof \MongoDB\BSON\ObjectId ? (string) $value : $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['category']) || (! empty($this->class->fieldMappings['category']['nullable']) && array_key_exists('category', $data))) {
            $value = $data['category'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['category']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['category']->setValue($document, $return);
            $hydratedData['category'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title']) || (! empty($this->class->fieldMappings['title']['nullable']) && array_key_exists('title', $data))) {
            $value = $data['title'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['title']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['description']) || (! empty($this->class->fieldMappings['description']['nullable']) && array_key_exists('description', $data))) {
            $value = $data['description'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['description']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['description']->setValue($document, $return);
            $hydratedData['description'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['date']) || (! empty($this->class->fieldMappings['eventDate']['nullable']) && array_key_exists('date', $data))) {
            $value = $data['date'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['eventDate']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['eventDate']->setValue($document, $return);
            $hydratedData['eventDate'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['address']) || (! empty($this->class->fieldMappings['address']['nullable']) && array_key_exists('address', $data))) {
            $value = $data['address'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['address']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['address']->setValue($document, $return);
            $hydratedData['address'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['image_url']) || (! empty($this->class->fieldMappings['imageUrl']['nullable']) && array_key_exists('image_url', $data))) {
            $value = $data['image_url'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['imageUrl']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['imageUrl']->setValue($document, $return);
            $hydratedData['imageUrl'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['eventId']) || (! empty($this->class->fieldMappings['eventId']['nullable']) && array_key_exists('eventId', $data))) {
            $value = $data['eventId'];
            if ($value !== null) {
                $typeIdentifier = $this->class->fieldMappings['eventId']['type'];
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['eventId']->setValue($document, $return);
            $hydratedData['eventId'] = $return;
        }
        return $hydratedData;
    }
}